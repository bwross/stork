APPNAME=Stork
VERSION=3.0a

PROJECT=stork

CMDS=info ls q raw rm server status submit user cred
JARFILE=lib/$(PROJECT)-$(VERSION).jar

CLASSPATH=$(call classpathify,$(LIBJARS)):build
DBGFLAG=-g  # Uncomment to compile with debugging info.
JMEM=-J-Xmx512m
JFLAGS=$(JMEM) -classpath $(CLASSPATH)
JCFLAGS=$(JFLAGS) $(DBGFLAG) -sourcepath $(PROJECT) -nowarn

JAVA=java
JC=javac
JAR=jar
JAVADOC=javadoc
TAR=tar
LN=ln

.PHONY: all install clean init release classes pkglist $(PROJECT)_cmds
.SUFFIXES: .java .class

# Recursive wildcard function from jgc.org.
rwildcard=$(foreach d,$(wildcard $1/*),$(call rwildcard,$d,$2) \
	$(filter $(subst *,%,$2),$d))
rdirs=$1 $(patsubst %/.,%,$(wildcard $(addsuffix /.,$(call rwildcard,$1,*))))

# Used to join space-delimited lists with a string.
empty:=
space:=$(empty) $(empty)
classpathify=$(subst $(space) ,:,$1)

JAVASRCS=$(call rwildcard,$(PROJECT),*.java)
JAVASRCS:=$(patsubst %/package-info.java,,$(JAVASRCS))
CLASSES=$(JAVASRCS:%.java=build/%.class)
#CLASSNAMES=$(subst /,.,$(JAVASRCS:%.java=%))
LIBJARS=$(call rwildcard,lib,*.jar)

DOC=doc  # Directory to output documentation into.

TO_BUILD= # Generated by "build/%.class" rule.
JC_CMD=   # Set only if we need to compile something.

all: $(CLASSES) build/build_tag | build
	$(JC_CMD) $(TO_BUILD)
	@$(MAKE) --no-print-directory build/build_tag 
	@$(MAKE) --no-print-directory $(JARFILE)
	@$(MAKE) --no-print-directory $(PROJECT)_cmds

build:
	@mkdir -p build

$(JARFILE): $(CLASSES)
	$(JAR) $(JMEM) cf $(JARFILE) -C build .

build/%.class: %.java | build
	$(eval TO_BUILD += $<)
	$(eval JC_CMD=$(JC) $(JFLAGS) -d build)

classes: $(TO_BUILD) | build

# Legacy underscore-named bins.
$(PROJECT)_cmds: $(patsubst %,bin/$(PROJECT)_%,$(CMDS))

bin/$(PROJECT)_%: bin/$(PROJECT)
	@[ -e $@ ] || $(LN) -s $(PROJECT) $@

release: $(PROJECT).tar.gz

src-release: $(PROJECT)-src.tar.gz

$(PROJECT).tar.gz: $(JARFILE) 
	$(TAR) czf $(PROJECT).tar.gz bin libexec --exclude='*/CVS' \
		--transform 's,^,$(PROJECT)/,'

$(PROJECT)-src.tar.gz: dist-clean
	$(TAR) czf $(PROJECT)-src.tar.gz * --exclude='*/CVS'

build/build_tag: $(CLASSES) | build
	@echo Generating build tag...
	@echo appname=$(APPNAME) > build/build_tag
	@echo version=$(VERSION) >> build/build_tag
	@echo buildtime=$(shell date) >> build/build_tag

pkglist:
	@echo $(subst /,.,$(call rdirs,$(PROJECT)))

doc: $(JAVASRCS)
	@$(JAVADOC) -classpath $(CLASSPATH) -d $(DOC) \
	  -link http://docs.oracle.com/javase/7/docs/api \
	  -sourcepath $(PROJECT) $(JAVASRCS)

test: all
	@echo Running tests...
	$(JAVA) -classpath $(CLASSPATH) org.junit.runner.JUnitCore $(PROJECT).test.Tests
	@echo Testing complete.

clean:
	$(RM) -rf build lib/$(PROJECT)-*.jar $(PROJECT).tar.gz bin/$(PROJECT)_*
